import json
import requests
from os.path import join, dirname, realpath
from nio.metadata.properties import StringProperty

# Dependency found at:
# https://github.com/google/oauth2client/tree/python3
from oauth2client.client import SignedJwtAssertionCredentials


class OAuth2Exception(Exception):
    pass


class OAuth2():

    # A string representing where to find the private key json file. The file
    # should follow the format of the file generated by clicking Download JSON
    # from the Google Developers Console
    key_config_file = StringProperty(
        title="Private Key Config File", default="private_key.json")

    _token_request_url = 'https://accounts.google.com/o/oauth2/token'

    def get_access_token(self, scope=''):
        """ Obtain an access token for the specified scope

        Args:
            scope (str): The OAuth scope to get a token for

        Returns:
            token (str): The resulting access token

        Raises:
            OAuth2Exception: If the token request fails for any reason
        """
        key_info = self._load_json_file()

        cred = SignedJwtAssertionCredentials(
            key_info.get('client_email', ''),
            key_info.get('private_key', '').encode('utf-8'),
            scope)

        # Request a new token from the token request URL
        try:
            r = requests.post(
                self._token_request_url,
                data=cred._generate_refresh_request_body(),
                headers=cred._generate_refresh_request_headers()
            )
        except:
            raise OAuth2Exception("Could not complete request to {0}".format(
                self._token_request_url))

        if r.status_code != 200:
            raise OAuth2Exception(r.json().get('error',
                                               'Token Request Failed'))

        try:
            resp_data = r.json()
            token = resp_data['access_token']
            # expires_in = resp_data.get('expires_in', 3600)

            return token
        except:
            pass

        raise OAuth2Exception("Could not extract token from response {0}"
                              .format(r.text))

    def get_access_token_headers(self, access_token):
        """ Get the HTTP Request headers for a given access token """
        return {"Authorization": "Bearer {0}".format(access_token)}

    def _load_json_file(self):
        """ Loads the configured JSON file with private key information """
        json_data = dict()
        with open(join(dirname(realpath(__file__)),
                       self.key_config_file)) as json_file:
            json_data = json.load(json_file)

        return json_data
